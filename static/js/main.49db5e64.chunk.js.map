{"version":3,"sources":["static-data.js","reducers/contacts.js","actions/constants/action-types.js","reducers/typing.js","reducers/index.js","reducers/user.js","reducers/messages.js","reducers/activeUserId.js","store/index.js","actions/index.js","containers/User.js","components/Sidebar.js","components/Empty.js","components/Header.js","components/Chats.js","containers/MessageInput.js","containers/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","SET_ACTIVE_USER_ID","SEND_MESSAGE","combineReducers","state","arguments","undefined","action","type","_action$payload","payload","message","userId","allUserMsgs","keys","pop","defineProperty","typing","activeUserId","store","createStore","reducer","setActiveUserId","id","handleUserClick","_ref","dispatch","User","_ref2","react_default","a","createElement","className","onClick","bind","src","alt","Sidebar","map","contact","containers_User","key","Empty","first_name","split","Header","Chat","concat","Chats","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","ref","Chats_Chat","Component","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","target","placeholder","ChatWindow","activeUser","activeMsgs","components_Header","components_Chats","values","containers_MessageInput","Main","containers_ChatWindow","components_Empty","App","_store$getState","components_Sidebar","components_Main","Boolean","window","location","hostname","match","render","console","log","ReactDOM","containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49db5e64.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}\r\n","import { contacts } from \"../static-data\";\r\n\r\nexport default (state = contacts, action) => {\r\n  return state;\r\n};\r\n\r\n//reducers are functions, here \"contacts\" object is imported , so naming same identifier will give error\r\n","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n","import {\r\n  SET_TYPING_VALUE,\r\n  SEND_MESSAGE\r\n} from \"../actions/constants/action-types\";\r\n\r\nexport default function(state = \"\", action) {\r\n  switch (action.type) {\r\n    case SET_TYPING_VALUE:\r\n      return action.payload;\r\n    case SEND_MESSAGE:\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport user from \"./user\";\r\nimport contacts from \"./contacts\";\r\nimport activeUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\n\r\nexport default combineReducers({\r\n  user,\r\n  messages,\r\n  typing,\r\n  contacts,\r\n  activeUserId\r\n});\r\n\r\n// here {user:user() }  using ES6\r\n// user() is reducer FUNCTION\r\n\r\n// When using combineReducers, the value returned from each reducer is not the state of the application.\r\n// It is only the value of the particular key they represent in the state object!\r\n","import { generateUser } from \"../static-data\";\r\nexport default function user(state = generateUser(), action) {\r\n  return state;\r\n}\r\n","import { getMessages } from \"../static-data\";\r\nimport { SEND_MESSAGE } from \"../actions/constants/action-types\";\r\nimport _ from \"lodash\";\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      const { message, userId } = action.payload;\r\n\r\n      //   Since every contact’s message is mapped with their user ID,\r\n      //   the code below gets the messages for the specific user ID passed in from the action.\r\n      //   not the overall state, but state of messages managed by this reducer\r\n      //   state = getMessages(10) returns messages object wich contains userId and its messages\r\n\r\n      const allUserMsgs = state[userId];\r\n      const number = +_.keys(allUserMsgs).pop() + 1;\r\n\r\n      //  _.keys(allUserMsgs) will return an array of all the keys of the user’s messages\r\n      // there’s a +  to make sure that the result is converted to a Number instead of a String.\r\n\r\n      return {\r\n        ...state,\r\n        [userId]: {\r\n          ...allUserMsgs,\r\n          [number]: {\r\n            number,\r\n            text: message,\r\n            is_user_msg: true\r\n          }\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_ACTIVE_USER_ID } from \"../actions/constants/action-types\";\r\n\r\nexport default function activeUserId(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_USER_ID:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"../reducers\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import {\r\n  SET_ACTIVE_USER_ID,\r\n  SET_TYPING_VALUE,\r\n  SEND_MESSAGE\r\n} from \"./constants/action-types\";\r\n\r\nexport const setActiveUserId = id => ({\r\n  type: SET_ACTIVE_USER_ID,\r\n  payload: id\r\n});\r\n\r\nexport const setTypingValue = value => ({\r\n  type: SET_TYPING_VALUE,\r\n  payload: value\r\n});\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: {\r\n    message,\r\n    userId\r\n  }\r\n});\r\n","import React from \"react\";\r\nimport \"../styles/User.css\";\r\nimport store from \"../store\";\r\nimport { setActiveUserId } from \"../actions\";\r\n\r\nfunction handleUserClick({ user_id }) {\r\n  store.dispatch(setActiveUserId(user_id));\r\n}\r\n\r\nconst User = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n  return (\r\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n      <img src={profile_pic} alt={name} className=\"User__pic\" />\r\n      <div className=\"User__details\">\r\n        <p className=\"User__details-name\">{name}</p>\r\n        <p className=\"User__details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\r\nimport \"../styles/Sidebar.css\";\r\nimport User from \"../containers/User\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n  return (\r\n    <div>\r\n      <aside className=\"Sidebar\">\r\n        {contacts.map(contact => (\r\n          <User user={contact} key={contact.user_id} />\r\n        ))}\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"../styles/Empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n  const first_name = name.split(\" \")[0];\r\n\r\n  return (\r\n    <div className=\"Empty\">\r\n      <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n      <p className=\"Empty__status\">\r\n        <b>Status:</b> {status}\r\n      </p>\r\n      <button className=\"Empty__btn\">Start a conversation</button>\r\n      <p className=\"Empty__info\">\r\n        Search for someone to start chatting with or go to Contacts to see who\r\n        is available\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Empty;\r\n","import React from \"react\";\r\nimport \"../styles/Header.css\";\r\n\r\nconst Header = ({ user }) => {\r\n  const { name, status, profile_pic } = user;\r\n  return (\r\n    <header className=\"Header\">\r\n      <img className=\"Header__picture\" alt=\"profile\" src={profile_pic} />\r\n      <h1 className=\"Header__name\">{name}</h1>\r\n      <p className=\"Header__status\">{status}</p>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Chats.css\";\r\n\r\nconst Chat = ({ message }) => {\r\n  const { text, is_user_msg } = message;\r\n  return (\r\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\r\n  );\r\n};\r\n\r\nclass Chats extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chatsRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Chats\" ref={this.chatsRef}>\r\n        {this.props.messages.map(message => (\r\n          <Chat message={message} key={message.number} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chats;\r\n","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage } from \"../actions\";\r\nimport \"../styles/MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n  const state = store.getState();\r\n\r\n  const handleChange = e => {\r\n    store.dispatch(setTypingValue(e.target.value));\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { typing, activeUserId } = state;\r\n    store.dispatch(sendMessage(typing, activeUserId));\r\n  };\r\n\r\n  return (\r\n    <form className=\"Message\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"Message__input\"\r\n        onChange={handleChange}\r\n        value={value}\r\n        placeholder=\"write a message\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import React from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport store from \"../store\";\r\nimport Chats from \"../components/Chats\";\r\nimport MessageInput from \"../containers/MessageInput\";\r\nimport \"../styles/ChatWindow.css\";\r\nimport _ from \"lodash\";\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n  const state = store.getState();\r\n  const { typing } = state;\r\n  const activeUser = state.contacts[activeUserId];\r\n  const activeMsgs = state.messages[activeUserId];\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <Header user={activeUser} />\r\n      <Chats messages={_.values(activeMsgs)} />\r\n      <MessageInput value={typing} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from \"react\";\r\nimport \"../styles/Main.css\";\r\nimport Empty from \"./Empty\";\r\nimport ChatWindow from \"../containers/ChatWindow\";\r\n\r\nconst Main = ({ user, activeUserId }) => {\r\n  return (\r\n    <div className=\"Main\">\r\n      {!activeUserId ? (\r\n        <Empty user={user} activeUserId={activeUserId} />\r\n      ) : (\r\n        <div>\r\n          <ChatWindow activeUserId={activeUserId} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Sidebar from \"../components/Sidebar\";\nimport Main from \"../components/Main\";\nimport \"../styles/App.css\";\nimport _ from \"lodash\";\n\n//Redux\nimport store from \"../store\";\n\nfunction App() {\n  const { user, contacts, activeUserId } = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)} />\n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\n\nconst render = () => {\n  fancyLog();\n  return ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\nrender();\nstore.subscribe(render);\nserviceWorker.unregister();\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with\", \"background: purple; color: #FFF\");\n  console.log(store.getState());\n}\n"],"sourceRoot":""}